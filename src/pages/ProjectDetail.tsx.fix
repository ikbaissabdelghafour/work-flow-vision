  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">{project.name}</h1>
          <p className="text-gray-500">{project.description}</p>
        </div>
        
        {isAdmin && (
          <Dialog open={isNewTaskOpen} onOpenChange={setIsNewTaskOpen}>
            <DialogTrigger asChild>
              <Button className="bg-blue-600 hover:bg-blue-700 text-white">
                <Plus className="h-4 w-4 mr-2" />
                Add Task
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Create New Task</DialogTitle>
                <DialogDescription>
                  Add a new task to {project.name}
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="title">Task Title</Label>
                  <Input 
                    id="title" 
                    placeholder="Enter task title"
                    value={newTask.title}
                    onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea 
                    id="description" 
                    placeholder="Describe the task"
                    value={newTask.description}
                    onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="assignedEmployees">Assign Employees</Label>
                  <select
                    id="assignedEmployees"
                    multiple
                    className="flex h-20 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    value={newTask.assignedEmployees}
                    onChange={(e) => {
                      const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);
                      setNewTask(prev => ({ 
                        ...prev, 
                        assignedEmployees: selectedOptions 
                      }));
                    }}
                  >
                    {teamEmployees.map(employee => (
                      <option key={employee.id} value={employee.id}>
                        {employee.name} - {employee.role}
                      </option>
                    ))}
                  </select>
                  <p className="text-xs text-gray-500">Hold Ctrl/Cmd to select multiple employees</p>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="tjm">TJM (€)</Label>
                    <Input 
                      id="tjm" 
                      type="number"
                      placeholder="Daily rate"
                      value={newTask.tjm || ""}
                      onChange={(e) => setNewTask(prev => ({ ...prev, tjm: parseInt(e.target.value) || 0 }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="daysSpent">Estimated Days</Label>
                    <Input 
                      id="daysSpent" 
                      type="number"
                      placeholder="Days required"
                      value={newTask.daysSpent || ""}
                      onChange={(e) => setNewTask(prev => ({ ...prev, daysSpent: parseInt(e.target.value) || 0 }))}
                    />
                  </div>
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setIsNewTaskOpen(false)} disabled={isCreatingTask}>Cancel</Button>
                <Button onClick={handleCreateTask} disabled={isCreatingTask}>
                  {isCreatingTask ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Creating...
                    </>
                  ) : (
                    'Create Task'
                  )}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        )}
        
        {/* Edit Task Dialog */}
        <Dialog open={isEditTaskOpen} onOpenChange={setIsEditTaskOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Edit Task</DialogTitle>
              <DialogDescription>
                Update task details
              </DialogDescription>
            </DialogHeader>
            {selectedTask && (
              <div className="space-y-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-title">Task Title</Label>
                  <Input 
                    id="edit-title" 
                    placeholder="Enter task title"
                    value={selectedTask.title}
                    onChange={(e) => setSelectedTask(prev => prev ? { ...prev, title: e.target.value } : null)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-description">Description</Label>
                  <Textarea 
                    id="edit-description" 
                    placeholder="Describe the task"
                    value={selectedTask.description}
                    onChange={(e) => setSelectedTask(prev => prev ? { ...prev, description: e.target.value } : null)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-assignedEmployees">Assign Employees</Label>
                  <select
                    id="edit-assignedEmployees"
                    multiple
                    className="flex h-20 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    value={selectedTask.assignedEmployees}
                    onChange={(e) => {
                      const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);
                      setSelectedTask(prev => prev ? { 
                        ...prev, 
                        assignedEmployees: selectedOptions 
                      } : null);
                    }}
                  >
                    {teamEmployees.map(employee => (
                      <option key={employee.id} value={employee.id}>
                        {employee.name} - {employee.role}
                      </option>
                    ))}
                  </select>
                  <p className="text-xs text-gray-500">Hold Ctrl/Cmd to select multiple employees</p>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="edit-tjm">TJM (€)</Label>
                    <Input 
                      id="edit-tjm" 
                      type="number"
                      placeholder="Daily rate"
                      value={selectedTask.tjm || ""}
                      onChange={(e) => setSelectedTask(prev => prev ? { ...prev, tjm: parseInt(e.target.value) || 0 } : null)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-daysSpent">Estimated Days</Label>
                    <Input 
                      id="edit-daysSpent" 
                      type="number"
                      placeholder="Days required"
                      value={selectedTask.daysSpent || ""}
                      onChange={(e) => setSelectedTask(prev => prev ? { ...prev, daysSpent: parseInt(e.target.value) || 0 } : null)}
                    />
                  </div>
                </div>
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsEditTaskOpen(false)} disabled={isUpdatingTask}>Cancel</Button>
              <Button onClick={handleUpdateTask} disabled={isUpdatingTask}>
                {isUpdatingTask ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Updating...
                  </>
                ) : (
                  'Update Task'
                )}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
        
        {/* Delete Task Dialog */}
        <Dialog open={isDeleteTaskOpen} onOpenChange={setIsDeleteTaskOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Delete Task</DialogTitle>
              <DialogDescription>
                Are you sure you want to delete this task? This action cannot be undone.
              </DialogDescription>
            </DialogHeader>
            {selectedTask && (
              <div className="p-4 my-4 border rounded-md bg-gray-50">
                <h3 className="font-medium">{selectedTask.title}</h3>
                {selectedTask.description && (
                  <p className="text-sm text-gray-500 mt-1">{selectedTask.description}</p>
                )}
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsDeleteTaskOpen(false)} disabled={isDeletingTask}>Cancel</Button>
              <Button variant="destructive" onClick={handleDeleteTask} disabled={isDeletingTask}>
                {isDeletingTask ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Deleting...
                  </>
                ) : (
                  'Delete Task'
                )}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
      
      <Tabs defaultValue="kanban" className="mt-6">
        <TabsList>
          <TabsTrigger value="kanban">Kanban</TabsTrigger>
          <TabsTrigger value="list">List</TabsTrigger>
        </TabsList>
        
        <TabsContent value="kanban" className="mt-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card className="border-t-4 border-t-gray-400">
              <CardHeader className="bg-gray-50">
                <CardTitle className="text-gray-700 flex items-center">
                  <AlertCircle className="h-4 w-4 mr-2 text-gray-500" />
                  To Do
                </CardTitle>
                <CardDescription>{todoTasks.length} task{todoTasks.length !== 1 ? 's' : ''}</CardDescription>
              </CardHeader>
              <CardContent className="pt-4 max-h-[calc(100vh-300px)] overflow-y-auto">
                {todoTasks.length > 0 ? (
                  todoTasks.map(task => renderTaskCard(task))
                ) : (
                  <div className="text-center py-8 text-gray-400 italic">
                    No tasks to do
                  </div>
                )}
              </CardContent>
            </Card>
            
            <Card className="border-t-4 border-t-blue-400">
              <CardHeader className="bg-blue-50">
                <CardTitle className="text-blue-700 flex items-center">
                  <ArrowRight className="h-4 w-4 mr-2 text-blue-500" />
                  In Progress
                </CardTitle>
                <CardDescription>{inProgressTasks.length} task{inProgressTasks.length !== 1 ? 's' : ''}</CardDescription>
              </CardHeader>
              <CardContent className="pt-4 max-h-[calc(100vh-300px)] overflow-y-auto">
                {inProgressTasks.length > 0 ? (
                  inProgressTasks.map(task => renderTaskCard(task))
                ) : (
                  <div className="text-center py-8 text-gray-400 italic">
                    No tasks in progress
                  </div>
                )}
              </CardContent>
            </Card>
            
            <Card className="border-t-4 border-t-green-400">
              <CardHeader className="bg-green-50">
                <CardTitle className="text-green-700 flex items-center">
                  <CheckCircle className="h-4 w-4 mr-2 text-green-500" />
                  Done
                </CardTitle>
                <CardDescription>{doneTasks.length} task{doneTasks.length !== 1 ? 's' : ''}</CardDescription>
              </CardHeader>
              <CardContent className="pt-4 max-h-[calc(100vh-300px)] overflow-y-auto">
                {doneTasks.length > 0 ? (
                  doneTasks.map(task => renderTaskCard(task))
                ) : (
                  <div className="text-center py-8 text-gray-400 italic">
                    No completed tasks
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="list" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>All Tasks</CardTitle>
              <CardDescription>
                {tasks.length} task{tasks.length !== 1 ? 's' : ''} in this project
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {tasks.length > 0 ? (
                  tasks.map(task => renderTaskCard(task))
                ) : (
                  <div className="text-center py-12 bg-gray-50 rounded-lg">
                    <svg
                      className="mx-auto h-12 w-12 text-gray-400"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="1"
                        d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                      />
                    </svg>
                    <h3 className="mt-2 text-sm font-medium text-gray-900">No tasks</h3>
                    <p className="mt-1 text-sm text-gray-500">Get started by creating a new task.</p>
                    {isAdmin && (
                      <div className="mt-6">
                        <Button
                          onClick={() => setIsNewTaskOpen(true)}
                          className="bg-blue-600 hover:bg-blue-700 text-white"
                        >
                          <Plus className="h-4 w-4 mr-2" />
                          New Task
                        </Button>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ProjectDetail;
